Turbo Assembler	 Version 5.3	    05-15-18 21:56:53	    Page 1
COUNT.ASM



      1					 ;2.  Составить подпрограмму с именем Count	типа
      2					 ;	function (const	S: LONGWORD; L:LONGWORD)
      3					 ;возвращающую число единиц битовой строки S длины +
      4					 L.
      5
      6					 .386
      7	00000000			 .model	FLAT,PASCAL
      8					 PUBLIC	COUNT
      9
     10	00000000			 .CODE
     11	00000000			 COUNT PROC
     12
     13
     14	00000000  55			 push ebp
     15	00000001  8B EC			 mov ebp,esp
     16
     17					 ; Опять дефайны
     18		  = dword ptr[ebp+12]	 S EQU dword ptr[ebp+12] ; наша строка
     19		  = dword ptr[ebp+8]	 L EQU dword ptr[ebp+8]	; длина строки
     20
     21					 ;push edi
     22					 ;mov ebx,S
     23					 ;
     24					 ;mov edi, L				   ; В	регистре EDI теперь	    +
     25					 хранится размер строки
     26					 ;mov eax, 0				   ; EAX - число единиц
     27					 ;
     28					 ;BIG:					   ; Внешний цикл
     29					 ;    cmp edi, 0
     30					 ;		 je AGAIN			  ; Если размер строки - 0, +
     31					 выходим
     32					 ;	 cmp edi, 32
     33					 ;	  ja AGAIN			   ; Если размер > 32, запускаем +
     34					 AGAIN
     35					 ;
     36					 ;	 mov ecx, edi			      ;	ECX - счётчик лупа,		    +
     37					 поместили в него	текущий размер строки
     38					 ;										  ; В	    +
     39					 это	место можно попасть, только если размер	    +
     40					 строки  < 32
     41					 ;					      ;	Поэтому edi содержит	    +
     42					 корректный остаток размера строки
     43					 ;	 READY:
     44					 ;	      ;mov ecx,	esi		       ; Помещаем в счётчик	    +
     45					 цикла размер строки
     46					 ;		  ;mov esi, 0			   ; Обнуляем ESI. Теперь	    +
     47					 этот регистр будет отвечать за смещение. ECX	для	    +
     48					 этой
     49					 ;						  ; этой цели не пододёт,  +
     50					 так	как не дойдёт до нуля
     51					 ;	      GO:
     52					 ;	      ;bt  edx,	esi
     53					 ;	      bt  edx, ecx
     54					 ;			 adc eax, 0
     55					 ;	      ;inc esi;
     56					 ;	   loop	GO
     57					 ;		  bt  edx, ecx ; без	ecx удалить
Turbo Assembler	 Version 5.3	    05-15-18 21:56:53	    Page 2
COUNT.ASM



     58					 ;	      adc eax, 0   ; без ecx	удалить
     59					 ;		  loop BIG     ; ECX = -1, вроде должно всегда		    +
     60					 выполняться
     61					 ;
     62					 ;    AGAIN:				   ; Если размер > 32
     63					 ;	  sub edi, 32			   ; Вычитаем из размера	    +
     64					 строки 32
     65					 ;		 mov edx, [ebx]			  ; Сохраняем в регистр    +
     66					 адрес начала DWORD(Двоичного слова), чей адрес [ebx]
     67					 ;		 add ebx, 32			  ; Увеличиваем смещение +
     68					 ebx на 32. Не на	4, потому	что ebx - не адрес, а
     69					 ;						  ; смещение. А вообще	    +
     70					 нужно тестить.
     71					 ;		 mov ecx, 33			  ; ECX	- размер строки,	    +
     72					 максимум 32, за счёт лишнего лупа, пишем	33
     73					 ;		 loop GO ; без ecx вернуть READY
     74					 ;FINISH:
     75					 ;	 pop edi
     76					 ;	 pop ebp
     77					 ;	 ret 8 ; на вход пришло 2 аргумента по 4	байта.
     78
     79
     80	00000003  8B 5D	0C		 mov ebx, S ;Сама строка
     81	00000006  8B 7D	08		 mov edi, L ;Длина	строки
     82	00000009  B8 00000000		 mov eax, 0
     83	0000000E  B9 00000001		 mov ecx, 1
     84
     85	00000013			 loop_extern:
     86	00000013  51				 push ecx
     87	00000014  8B CF				 mov ecx, edi
     88
     89	00000016  83 FF	00			 cmp edi, 0
     90	00000019  74 28	90 90 90 90			 je fin
     91
     92	0000001F  8B 13				 mov edx, [ebx]
     93
     94	00000021  83 FF	20			 cmp edi, 32
     95	00000024  72 12	90 90 90 90			 jb loop_intern
     96
     97	0000002A				 GREATER:
     98	0000002A  83 EF	20				 sub edi, 32			  ; Вычитаем из размера    +
     99					 строки 32
    100							 ;		    ; Сохраняем в регистр адрес	    +
    101					 начала DWORD(Двоичного слова), чей адрес [ebx]
    102	0000002D  83 C3	20				 add ebx, 32			  ; Увеличиваем смещение +
    103					 ebx на 32. Не на	4, потому	что ebx - не адрес, а		    +
    104					 ; смещение. А	вообще нужно	тестить.
    105	00000030  59					 pop ecx
    106	00000031  41					 inc ecx
    107	00000032  51					 push ecx
    108	00000033  B9 00000020				 mov ecx, 32
    109
    110
    111	00000038				 loop_intern:
    112	00000038  0F A3	CA				 bt edx, ecx
    113	0000003B  83 D0	00				 adc eax, 0
    114	0000003E  E2 F8				 loop loop_intern
Turbo Assembler	 Version 5.3	    05-15-18 21:56:53	    Page 3
COUNT.ASM



    115
    116						 ;bt edx, ecx
    117						 ;adc eax, 0
    118	00000040  59				 pop ecx
    119
    120	00000041  E2 D0				 loop loop_extern
    121
    122	00000043			 fin:
    123	00000043  5D				 pop ebp
    124	00000044  C2 0008			 ret 8
    125
    126
    127					 ;push edi
    128					 ;mov ebx,S
    129					 ;
    130					 ;mov edi, L				   ; В	регистре EDI теперь	    +
    131					 хранится размер строки
    132					 ;mov eax, 0				   ; EAX - число единиц
    133					 ;
    134					 ;BIG:					   ; Внешний цикл
    135					 ;    cmp edi, 0
    136					 ;		 je AGAIN			  ; Если размер строки - 0, +
    137					 выходим
    138					 ;	 cmp edi, 32
    139					 ;	  ja AGAIN			   ; Если размер > 32, запускаем +
    140					 AGAIN
    141					 ;
    142					 ;	 mov ecx, edi			      ;	ECX - счётчик лупа,		    +
    143					 поместили в него	текущий размер строки
    144					 ;										  ; В	    +
    145					 это	место можно попасть, только если размер	    +
    146					 строки  < 32
    147					 ;					      ;	Поэтому edi содержит	    +
    148					 корректный остаток размера строки
    149					 ;	 READY:
    150					 ;	      ;mov ecx,	esi		       ; Помещаем в счётчик	    +
    151					 цикла размер строки
    152					 ;		  ;mov esi, 0			   ; Обнуляем ESI. Теперь	    +
    153					 этот регистр будет отвечать за смещение. ECX	для	    +
    154					 этой
    155					 ;						  ; этой цели не пододёт,  +
    156					 так	как не дойдёт до нуля
    157					 ;	      GO:
    158					 ;	      ;bt  edx,	esi
    159					 ;	      bt  edx, ecx
    160					 ;			 adc eax, 0
    161					 ;	      ;inc esi;
    162					 ;	   loop	GO
    163					 ;		  bt  edx, ecx ; без	ecx удалить
    164					 ;	      adc eax, 0   ; без ecx	удалить
    165					 ;		  loop BIG     ; ECX = -1, вроде должно всегда		    +
    166					 выполняться
    167					 ;
    168					 ;    AGAIN:				   ; Если размер > 32
    169					 ;	  sub edi, 32			   ; Вычитаем из размера	    +
    170					 строки 32
    171					 ;		 mov edx, [ebx]			  ; Сохраняем в регистр    +
Turbo Assembler	 Version 5.3	    05-15-18 21:56:53	    Page 4
COUNT.ASM



    172					 адрес начала DWORD(Двоичного слова), чей адрес [ebx]
    173					 ;		 add ebx, 32			  ; Увеличиваем смещение +
    174					 ebx на 32. Не на	4, потому	что ebx - не адрес, а
    175					 ;						  ; смещение. А вообще	    +
    176					 нужно тестить.
    177					 ;		 mov ecx, 33			  ; ECX	- размер строки,	    +
    178					 максимум 32, за счёт лишнего лупа, пишем	33
    179					 ;		 loop GO ; без ecx вернуть READY
    180					 ;FINISH:
    181					 ;	 pop edi
    182					 ;	 pop ebp
    183					 ;	 ret 8 ; на вход пришло 2 аргумента по 4	байта.
    184	00000047			 COUNT ENDP
    185					 END
Turbo Assembler	 Version 5.3	    05-15-18 21:56:53	    Page 5
Symbol Table




Symbol Name			  Type	 Value

??DATE				  Text	 "05-15-18"
??FILENAME			  Text	 "COUNT	  "
??TIME				  Text	 "21:56:53"
??VERSION			  Number 0503
@32BIT				  Text	 1
@CODE				  Text	 FLAT
@CODESIZE			  Text	 0
@CPU				  Text	 0F0FH
@CURSEG				  Text	 _TEXT
@DATA				  Text	 FLAT
@DATASIZE			  Text	 0
@FILENAME			  Text	 COUNT
@INTERFACE			  Text	 004H
@MODEL				  Text	 1
@STACK				  Text	 FLAT
@WORDSIZE			  Text	 4
COUNT				  Near32 FLAT:0000
FIN				  Near32 FLAT:0043
GREATER				  Near32 FLAT:002A
L				  Text	 dword ptr[ebp+8]
LOOP_EXTERN			  Near32 FLAT:0013
LOOP_INTERN			  Near32 FLAT:0038
S				  Text	 dword ptr[ebp+12]

Groups & Segments		  Bit Size Align  Combine Class

DGROUP				  Group
  _DATA				  32  0000 Dword  Public  DATA
FLAT				  Group
_TEXT				  32  0047 Dword  Public  CODE
